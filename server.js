const { Telegraf } = require('telegraf');
const express = require('express');
const app = express();

const bot = new Telegraf(process.env.BOT_TOKEN);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞
const WEBHOOK_URL = process.env.WEBHOOK_URL; // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
if (WEBHOOK_URL) {
  bot.telegram.setWebhook(WEBHOOK_URL + '/');
} else {
  console.error('WEBHOOK_URL is not set');
}

// –í–µ–±—Ö—É–∫
app.use(express.json());
app.use(bot.webhookCallback('/'));

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–ø–ª–∞–µ–≤ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ ID –±–æ—Ç–∞)
bot.on('message', async (ctx) => {
  console.log('–°–æ–æ–±—â–µ–Ω–∏–µ:', ctx.message.text); // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
  const reply = ctx.message.reply_to_message;
  if (reply && reply.from.id === ctx.botInfo.id) {
    const userName = ctx.from.first_name || '–¥—Ä—É–≥';
    await ctx.reply(
      `–ü—Ä–∏–≤–µ—Ç, *${userName}*! –ß–µ–º –ø–æ–º–æ—á—å? üòä`,
      { 
        parse_mode: 'Markdown',
        reply_to_message_id: ctx.message.message_id
      }
    ).catch(err => {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
bot.hears(/–ø—Ä–∏–≤–µ—Ç|–±–æ—Ç|–∂–æ–ø–∞|—Å–∞–ª—é—Ç|–ø–æ–º–æ—â—å/i, (ctx) => {
  const userName = ctx.from.first_name || '–¥—Ä—É–≥';
  ctx.reply(
    `*${userName}*, —è –∑–¥–µ—Å—å! üöÄ`,
    { 
      parse_mode: 'Markdown',
      reply_to_message_id: ctx.message.message_id 
    }
  ).catch(err => {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(process.env.PORT || 3000, () => {
  bot.launch(); // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Long Polling
  console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ Long Polling!');
});
